library(readr)
# This line will only run if the UsedCars.csv is stored in the same directory as this notebook!
UsedCars <- read_csv("UsedCars.csv")
StateHW2 = "NC"
# Creates a dataframe with the number of each model for sale in North Carolina
Vehicles = as.data.frame(table(UsedCars$Model[UsedCars$State==StateHW2]))
# Renames the variables
names(Vehicles)[1] = "Model"
names(Vehicles)[2] = "Count"
# Restricts the data to only models with at least 100 for sale
# Vehicles from non US companies are contained in this data
# Before submitting, comment this out so that it doesn't print while knitting
Enough_Vehicles = subset(Vehicles, Count>=100)
Enough_Vehicles
View(Vehicles)
View(UsedCars)
View(Vehicles)
View(Vehicles)
View(Enough_Vehicles)
# Delete the ** below and enter the model that you chose from the Enough_Vehicles data.
ModelOfMyChoice = "**"
# Takes a subset of your model vehicle from North Carolina
MyVehicles = subset(UsedCars, Model == "ChallengerR/T" & State==StateHW2)
# Check to make sure that the vehicles span at least 6 years.
range(MyVehicles$Year)
# Delete the ** below and enter the model that you chose from the Enough_Vehicles data.
ModelOfMyChoice = "ChallengerR/T"
# Takes a subset of your model vehicle from North Carolina
MyVehicles = subset(UsedCars, Model==ModelOfMyChoice & State==StateHW2)
# Check to make sure that the vehicles span at least 6 years.
range(MyVehicles$Year)
View(MyVehicles)
# Delete the ** below and enter the model that you chose from the Enough_Vehicles data.
ModelOfMyChoice = "RogueS"
# Takes a subset of your model vehicle from North Carolina
MyVehicles = subset(UsedCars, Model==ModelOfMyChoice & State==StateHW2)
# Check to make sure that the vehicles span at least 6 years.
range(MyVehicles$Year)
# Delete the ** below and enter the model that you chose from the Enough_Vehicles data.
ModelOfMyChoice = "RogueS"
# Takes a subset of your model vehicle from North Carolina
MyVehicles = subset(UsedCars, Model==ModelOfMyChoice & State==StateHW2)
# Check to make sure that the vehicles span at least 6 years.
range(MyVehicles$Year)
View(MyVehicles)
View(Vehicles)
View(UsedCars)
# Delete the ** below and enter the model that you chose from the Enough_Vehicles data.
ModelOfMyChoice = "Corvette2dr"
# Takes a subset of your model vehicle from North Carolina
MyVehicles = subset(UsedCars, Model==ModelOfMyChoice & State==StateHW2)
# Check to make sure that the vehicles span at least 6 years.
range(MyVehicles$Year)
# Delete the ** below and enter the model that you chose from the Enough_Vehicles data.
ModelOfMyChoice = "Civic"
# Takes a subset of your model vehicle from North Carolina
MyVehicles = subset(UsedCars, Model==ModelOfMyChoice & State==StateHW2)
# Check to make sure that the vehicles span at least 6 years.
range(MyVehicles$Year)
View(MyVehicles)
View(MyVehicles)
mileage_model = lm(Mileage~Price, data = MyVechicles)
mileage_model = lm(Mileage~Price, data = MyVehicles)
summary(mileage_model)
# Delete the ** below and enter the model that you chose from the Enough_Vehicles data.
ModelOfMyChoice = "Corvette2dr"
# Takes a subset of your model vehicle from North Carolina
MyVehicles = subset(UsedCars, Model==ModelOfMyChoice & State==StateHW2)
# Check to make sure that the vehicles span at least 6 years.
range(MyVehicles$Year)
mileage_model = lm(Mileage~Price, data = MyVehicles)
summary(mileage_model)
mileage_model = lm(Price~Mileage, data = MyVehicles)
summary(mileage_model)
# Delete the ** below and enter the model that you chose from the Enough_Vehicles data.
ModelOfMyChoice = "Civic"
# Takes a subset of your model vehicle from North Carolina
MyVehicles = subset(UsedCars, Model==ModelOfMyChoice & State==StateHW2)
# Check to make sure that the vehicles span at least 6 years.
range(MyVehicles$Year)
mileage_model = lm(Price~Mileage, data = MyVehicles)
summary(mileage_model)
mileage_model = lm(Mileage~Price, data = MyVehicles)
summary(mileage_model)
mileage_model = lm(Price~Mileage, data = MyVehicles)
summary(mileage_model)
plot(Price~Mileage, data = MyVehicles)
abline(mileage_model)
plot(mileage_model)
plot(mileage_model$residuals~mileage_model$fitted.values)
abline(0, 0)
qqnorm(mileage_model$residuals)
qqline(mileage_model$residuals)
View(MyVehicles)
View(mileage_model)
max(mileage_model$residuals, 5)
max(mileage_model$residuals)
head(5, sort(abs(mileage_model$residuals)))
abs(mileage_model$residuals)
sort(abs(mileage_model$residuals))
head(5, sort())
sort(abs(mileage_model$residuals), decreasing = TRUE)
head(5, sort())
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5) %>%
sum()
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model)
rstandard(head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5))
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard()
temp <- head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard()
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard()
which(head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5))
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard()
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model$residuals)[244, 227, 509, 230, 210, ]
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model$residuals)
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model)
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model)[244, 227, 509, 230, 210,]
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model)[c(244, 227, 509, 230, 210),]
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model)[c(244, 227, 509, 230, 210)]
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model)[244, 227, 509, 230, 210]
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model)[c(244, 227, 509, 230, 210)]
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model)[c(244, 227, 509, 230, 210)]
rstudentized(mileage_model)[c(244, 227, 509, 230, 210)]
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model)[c(244, 227, 509, 230, 210)]
rstudent(mileage_model)[c(244, 227, 509, 230, 210)]
head(sort(mileage_model$residuals, decreasing = TRUE), 5)
rstandard(mileage_model)[c(244, 227, 509, 230, 210)]
rstudent(mileage_model)[c(244, 227, 509, 230, 210)]
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model)[c(244, 227, 509, 230, 210)]
rstudent(mileage_model)[c(244, 227, 509, 230, 210)]
mileage_model$residuals
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model)[c(244, 227, 509, 230, 210)]
rstudent(mileage_model)[c(244, 227, 509, 230, 210)]
mileage_model$residuals.names
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model)[c(244, 227, 509, 230, 210)]
rstudent(mileage_model)[c(244, 227, 509, 230, 210)]
head(sort(abs(mileage_model$residuals), decreasing = TRUE), 5)
rstandard(mileage_model)[c(244, 227, 509, 230, 210)]
rstudent(mileage_model)[c(244, 227, 509, 230, 210)]
hatvalues(mileage_model)[c(244, 227, 509, 230, 210)]
2 / 509
2 * (2 / 509)
3 * (2 / 509)
hatvalues(mileage_model)[c(244, 227, 509, 230, 210)]
2 / 509
2 * (2 / 509)
3 * (2 / 509)
hatvalues(mileage_model)[c(244, 227, 509, 230, 210)]
mileage_model$terms
2 / 509
2 * (2 / 509)
3 * (2 / 509)
hatvalues(mileage_model)[c(244, 227, 509, 230, 210)]
typeof(mileage_model$terms)
2 / 509
2 * (2 / 509)
3 * (2 / 509)
hatvalues(mileage_model)[c(244, 227, 509, 230, 210)]
mileage_model$terms
2 / 509
2 * (2 / 509)
3 * (2 / 509)
hatvalues(mileage_model)[c(244, 227, 509, 230, 210)]
flight.summary =
#1
flights %>%
#2
mutate(
dep_min       = (dep_time%/%100)*60+dep_time%%100,
sched_dep_min = (sched_dep_time%/%100)*60+sched_dep_time%%100,
arr_min       = (arr_time%/%100)*60+arr_time%%100,
sched_arr_min = (sched_arr_time%/%100)*60+sched_arr_time%%100,
dep_delay_min = dep_min-sched_dep_min,
arr_delay_min = arr_min-sched_arr_min,
accuracy      = sqrt(dep_delay_min^2 + arr_delay_min^2)
) %>%
#3
filter(!is.na(accuracy)) %>%
#4
group_by(origin, dest, carrier) %>%
#5
summarize(
count=n(),
mean.acc=mean(accuracy, na.rm = TRUE),
var.acc=sd(accuracy, na.rm = TRUE),
mean.dist=mean(distance, na.rm = TRUE)
) %>%
#6
filter(count > 10) %>%
#7
ungroup() %>%
#8
mutate(proportion = count / sum(count))
# This is a good place to put libraries required for using the ggplot function
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(tidyverse)    #Loads the tidyverse suite of packages
library(nycflights13) #Contains Flight Data
library(knitr)        #kable() for HTML Tables
library(kableExtra)   #HTML Table Styling
flight.summary =
#1
flights %>%
#2
mutate(
dep_min       = (dep_time%/%100)*60+dep_time%%100,
sched_dep_min = (sched_dep_time%/%100)*60+sched_dep_time%%100,
arr_min       = (arr_time%/%100)*60+arr_time%%100,
sched_arr_min = (sched_arr_time%/%100)*60+sched_arr_time%%100,
dep_delay_min = dep_min-sched_dep_min,
arr_delay_min = arr_min-sched_arr_min,
accuracy      = sqrt(dep_delay_min^2 + arr_delay_min^2)
) %>%
#3
filter(!is.na(accuracy)) %>%
#4
group_by(origin, dest, carrier) %>%
#5
summarize(
count=n(),
mean.acc=mean(accuracy, na.rm = TRUE),
var.acc=sd(accuracy, na.rm = TRUE),
mean.dist=mean(distance, na.rm = TRUE)
) %>%
#6
filter(count > 10) %>%
#7
ungroup() %>%
#8
mutate(proportion = count / sum(count))
head(flight.summary) #DO NOT CHANGE THIS LINE OF CODE
ggplot(data=flight.summary, aes(x = mean.dist, y = mean.acc, color = origin)) +
geom_point()+
geom_smooth(se = FALSE, method = "lm")
ggplot(data=filter(flight.summary, mean.dist <= 3000), aes(x = mean.dist, y = mean.acc, color = origin)) +
geom_point()+
geom_smooth(se = FALSE, method = "lm")
flight.summary2 =
flight.summary %>%
mutate(rank=min_rank(mean.acc)) %>%
filter(min_rank(mean.acc)<=5 | min_rank(desc(mean.acc))<=5) %>%
arrange(rank)
kable(flight.summary2,
format = "html",
caption = "Top and Bottom 5 Accurate Flights",
col.names = c("Origin", "Destination", "Carrier", "Count", "Accuracy Average", "Accuracy Variance", "Distance Average", "Proportion", "Rank")
) %>%
kable_styling()
kable(flight.summary2,
format = "html",
caption = "Top and Bottom Five Accurate Flights",
col.names = c("Origin", "Destination", "Carrier", "Count", "Accuracy Average", "Accuracy Variance", "Distance Average", "Proportion", "Rank")
) %>%
kable_styling()
